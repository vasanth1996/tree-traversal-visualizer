{"version":3,"sources":["components/TreeNode/TreeNode.js","controller/TreeController/TreeNode.js","controller/TreeController/TreeData.js","components/SelectBox/SelectBox.js","controller/TreeController/DFS.js","controller/TreeController/BFS.js","containers/Tree/Tree.js","const/CONST.js","components/TopNavBar/TopNavBar.js","Routes/Routes.js","App.js","serviceWorker.js","index.js"],"names":["TreeNode","props","updateToParent","node","onChildRenderFinish","renderChildren","state","children","active","map","key","id","child","connectingLines","parentNode","document","getElementById","getBoundingClientRect","toJSON","childNode","padding","width","coOrdinates","x","y","x1","y1","push","setState","renderConnectingLines","line","x0","y0","borderColor","renderActiveArrow","showActiveArrow","className","htmlColor","getStatusClass","name","this","Component","undefined","getDerivedStateFromProps","defaultProps","tree","initTreeData","helper","level","index","parent","newNode","i","length","SelectBox","useState","value","setValue","placeholder","onChange","e","val","target","handleChange","delayCall","callback","Promise","resolve","setTimeout","startTraversal","result","onTraversalFinish","a","isFirst","res","inOrder","inOrderHelper","preOrder","preOrderHelper","postOrder","postOrderHelper","levelOrder","queue","shift","treeCONST","DFS","BFS","INORDER","PREORDER","POSTORDER","LEVELORDER","traversalForType","Tree","handleTypeChange","type","traversal","activeList","handleTraversalChange","isTraverseInProgress","_startTraversal","setActive","scrollToBottom","isTraverseFinish","window","scrollTo","body","scrollHeight","handleSnackBarClose","treeData","disabled","options","option","Grid","container","item","xs","md","renderType","renderTraversal","renderButtons","Button","onClick","variant","color","list","TNode","direction","justify","wrap","Slide","renderOptions","renderActiveList","Snackbar","open","autoHideDuration","TransitionComponent","TransitionRight","anchorOrigin","vertical","horizontal","onClose","elevation","severity","useStyles","makeStyles","theme","grow","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","sectionDesktop","height","TopNavBar","classes","AppBar","position","Toolbar","IconButton","edge","aria-label","AccountTree","Typography","noWrap","Routes","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.85028254.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n// Styles\r\nimport \"./treeNodeStyle.css\";\r\nimport { Line } from \"react-lineto\";\r\n\r\nexport default class TreeNode extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      id: null,\r\n      name: \"\",\r\n      children: [],\r\n      connectingLines: [],\r\n      active: null,\r\n    };\r\n  }\r\n\r\n  //Initializing state values with incoming props\r\n  static getDerivedStateFromProps = (props) => {\r\n    const { node, active } = props;\r\n    if (!node) return null;\r\n    return {\r\n      id: node.id,\r\n      name: node.name,\r\n      children: node.children,\r\n      active: active,\r\n    };\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.updateToParent();\r\n  }\r\n\r\n  // Sending back to parent node for Line drawing between parent and child\r\n  updateToParent = () => {\r\n    const { node } = this.props;\r\n    this.props.onChildRenderFinish(node);\r\n  };\r\n\r\n  // Render children Nodes\r\n  renderChildren = () => {\r\n    const { children, active } = this.state;\r\n    return children.map((node) => (\r\n      <TreeNode\r\n        active={active}\r\n        key={node.id}\r\n        node={node}\r\n        onChildRenderFinish={this.onChildRenderFinish}\r\n      />\r\n    ));\r\n  };\r\n\r\n  // Calls when child node gets mounted\r\n  onChildRenderFinish = (child) => {\r\n    if (!child || !child.id) return null;\r\n    const { id, connectingLines } = this.state;\r\n\r\n    let parentNode = document\r\n      .getElementById(id)\r\n      .getBoundingClientRect()\r\n      .toJSON();\r\n    let childNode = document\r\n      .getElementById(child.id)\r\n      .getBoundingClientRect()\r\n      .toJSON();\r\n\r\n    let padding = parentNode.width / 2;\r\n    let coOrdinates = {\r\n      x: parentNode.x + padding,\r\n      y: parentNode.y + padding + 26,\r\n      x1: childNode.x + padding,\r\n      y1: childNode.y + padding - 26,\r\n    };\r\n\r\n    connectingLines.push(coOrdinates);\r\n    this.setState({ connectingLines });\r\n  };\r\n\r\n  // Once all the child nodes mounted we need to draw lines between parent to child\r\n  renderConnectingLines = () => {\r\n    const { connectingLines } = this.state;\r\n    return connectingLines.map((line) => (\r\n      <Line\r\n        key={`line_${line.x1}_${line.y1}`}\r\n        x0={line.x}\r\n        y0={line.y}\r\n        x1={line.x1}\r\n        y1={line.y1}\r\n        borderColor={\"#2196F3\"}\r\n      />\r\n    ));\r\n  };\r\n\r\n  renderActiveArrow = () => {\r\n    const { active, node,showActiveArrow } = this.props;\r\n    if (showActiveArrow && active && node && active.id === node.id) {\r\n      return (<div className=\"tree-node-arrow\">\r\n        <ArrowDownwardIcon htmlColor=\"#FE6B8B\" />\r\n      </div>);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  getStatusClass = () => {\r\n    const { active, node } = this.props;\r\n    return active && node && active.id === node.id\r\n      ? \"tree-node-active\"\r\n      : \"tree-node-inactive\";\r\n  };\r\n\r\n  render() {\r\n    const { node } = this.props;\r\n\r\n    //If node is null return null\r\n    if (!node) return null;\r\n\r\n    // Rendering tree node\r\n    return (\r\n      <div className=\"tree-node-root\">\r\n        <div\r\n          id={node.id}\r\n          className={`tree-node-container ${this.getStatusClass()}`}\r\n        >\r\n          {node.name}\r\n        </div>\r\n        <div className=\"tree-node-children\">{this.renderChildren()}</div>\r\n        {this.renderConnectingLines()}\r\n        {this.renderActiveArrow()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTreeNode.defaultProps = {\r\n  active: false,\r\n  node: null,\r\n  onChildRenderFinish: () => {},\r\n  showActiveArrow : true,\r\n};\r\n","/**\r\n * Definition for binary tree node\r\n * @param {node value} name \r\n * @param {left node} left \r\n * @param {right node} right \r\n */\r\nexport default function TreeNode(id,name) {\r\n  this.id = id;\r\n  this.name = name === undefined ? 0 : name;\r\n  this.children = [];\r\n}\r\n","\r\nimport TreeNode from './TreeNode';\r\n\r\n// Sample Tree Structure\r\nconst tree = {\r\n    name : 'A',\r\n    children : [\r\n        {\r\n            name : 'B',\r\n            children : [\r\n                {\r\n                    name : 'C',\r\n                    children : []\r\n                },\r\n                {\r\n                    name : 'D',\r\n                    children : []\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            name : 'E',\r\n            children : [\r\n                {\r\n                    name : 'F',\r\n                    children : []\r\n                },\r\n                {\r\n                    name : 'G',\r\n                    children : []\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n\r\nconst initTreeData = () => {\r\n    let root = null;\r\n    if(!tree) return root;\r\n    \r\n    return helper(tree,0,0,'');\r\n}\r\n\r\nconst helper = (node,level,index,parent) => {\r\n    let id = `node_${level}_${index}_${parent}`;\r\n    let newNode = new TreeNode(id,node.name);\r\n    let children = node.children;\r\n    for(let i=0;i<children.length;i++){\r\n        let child = helper(children[i],level+1,i,node.name);\r\n        newNode.children.push(child);\r\n    }\r\n    return newNode;\r\n}\r\n\r\nexport default initTreeData();","import React,{useState} from 'react'\r\nimport './selectBoxStyle.css';\r\nexport default function SelectBox(props) {\r\n    \r\n    const [value,setValue] = useState(\"\");\r\n\r\n    function handleChange(e){\r\n        let val = e.target.value;\r\n        setValue(val);\r\n        props.handleChange(val);\r\n    }\r\n\r\n    return (\r\n        <div className = \"select-box-container\">\r\n            <label>{props.placeholder}</label>\r\n            <select {...props} \r\n            onChange = {(e) => handleChange(e)}\r\n            value = {value}\r\n            className = \"select-box\">\r\n                <option value = \"\">None</option>\r\n                {props.children}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nSelectBox.defaultProps = {\r\n    placeholder : \"Name\",\r\n    handleChange : (e) => {},\r\n}","const delayCall = (node,callback) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            callback(node);\r\n            resolve();\r\n        },1500);\r\n    })\r\n}\r\n\r\nexport const startTraversal = async (result,callback,onTraversalFinish) => {\r\n    let isFirst = true;\r\n    for(let res of result){\r\n        if(isFirst){\r\n            callback(res);\r\n            isFirst = false;\r\n            continue;\r\n        }\r\n        await delayCall(res,callback);\r\n    }\r\n    onTraversalFinish();\r\n}\r\n\r\n// InOrder Traversal\r\nexport const inOrder = async (tree,callback,onTraversalFinish) => {\r\n    let result = [];\r\n    inOrderHelper(tree,result);\r\n    startTraversal(result,callback,onTraversalFinish);\r\n}\r\n\r\nconst inOrderHelper = (node,result) => {\r\n    if(!node) return;\r\n    let children = node.children;\r\n    inOrderHelper(children[0],result);\r\n    result.push(node);\r\n    inOrderHelper(children[1],result);\r\n}\r\n\r\n// PreOrder \r\nexport const preOrder = async (tree,callback,onTraversalFinish) => {\r\n    let result = [];\r\n    preOrderHelper(tree,result);\r\n    startTraversal(result,callback,onTraversalFinish);\r\n}\r\n\r\nconst preOrderHelper = (node,result) => {\r\n    if(!node) return;\r\n    let children = node.children;\r\n    result.push(node);\r\n    preOrderHelper(children[0],result);\r\n    preOrderHelper(children[1],result);\r\n}\r\n\r\n// PostOrder\r\nexport const postOrder = async (tree,callback,onTraversalFinish) => {\r\n    let result = [];\r\n    postOrderHelper(tree,result);\r\n    startTraversal(result,callback,onTraversalFinish);\r\n}\r\n\r\nconst postOrderHelper = (node,result) => {\r\n    if(!node) return;\r\n    let children = node.children;\r\n    postOrderHelper(children[0],result);\r\n    postOrderHelper(children[1],result);\r\n    result.push(node);\r\n}","import { startTraversal } from './DFS';\r\n\r\nexport const levelOrder = async (tree,callback,onTraversalFinish) => {\r\n    let result = [];\r\n    let queue = [];\r\n    \r\n    if(tree) {queue.push(tree)};\r\n\r\n    while(queue.length > 0){\r\n        let node = queue.shift();\r\n        result.push(node);\r\n        let children = node.children;\r\n        if(children[0]){\r\n            queue.push(children[0]);\r\n        }\r\n        if(children[1]){\r\n            queue.push(children[1]);\r\n        }\r\n    }\r\n\r\n    startTraversal(result,callback,onTraversalFinish);\r\n}","import React, { Component } from \"react\";\r\n\r\n// Styles\r\nimport \"./treeStyle.css\";\r\n\r\n// Components\r\nimport TreeNode from \"../../components/TreeNode/TreeNode\";\r\nimport treeData from \"../../controller/TreeController/TreeData\";\r\nimport SelectBox from \"../../components/SelectBox/SelectBox\";\r\nimport TNode from \"../../controller/TreeController/TreeNode\";\r\n\r\n// Controllers\r\nimport {\r\n  inOrder,\r\n  preOrder,\r\n  postOrder,\r\n} from \"../../controller/TreeController/DFS\";\r\nimport { levelOrder } from \"../../controller/TreeController/BFS\";\r\n\r\n//Third party libraries\r\nimport { Grid, Button, Snackbar, Slide } from \"@material-ui/core\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nimport CONST from \"../../const/CONST\";\r\n\r\nconst treeCONST = CONST.tree;\r\n\r\nconst traversalForType = {\r\n  [treeCONST.DFS]: [treeCONST.INORDER, treeCONST.POSTORDER, treeCONST.PREORDER],\r\n  [treeCONST.BFS]: [treeCONST.LEVELORDER],\r\n};\r\n\r\nexport default class Tree extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      tree: treeData,\r\n      type: null,\r\n      traversal: null,\r\n      active: null,\r\n      activeList: [],\r\n      isTraverseInProgress: false,\r\n      isTraverseFinish: false,\r\n    };\r\n  }\r\n\r\n  handleTypeChange = (type) => {\r\n    this.setState({ type, traversal: null, active: null, activeList: [] });\r\n  };\r\n\r\n  handleTraversalChange = (traversal) => {\r\n    this.setState({ traversal, active: null, activeList: [] });\r\n  };\r\n\r\n  renderType() {\r\n    const { isTraverseInProgress } = this.state;\r\n    return (\r\n      <div className=\"tree-select-box\">\r\n        <SelectBox\r\n          disabled={isTraverseInProgress}\r\n          handleChange={this.handleTypeChange}\r\n          placeholder=\"Type\"\r\n        >\r\n          <option value={treeCONST.DFS}>DFS-Traversal</option>\r\n          <option value={treeCONST.BFS}>BFS-Traversal</option>\r\n        </SelectBox>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderTraversal() {\r\n    const { type, isTraverseInProgress } = this.state;\r\n\r\n    const traversal = traversalForType[type];\r\n    let options = null;\r\n\r\n    if (traversal) {\r\n      options = traversal.map((option) => (\r\n        <option value={option}>{option}</option>\r\n      ));\r\n    }\r\n\r\n    return (\r\n      <div className=\"tree-select-box\">\r\n        <SelectBox\r\n          disabled={isTraverseInProgress}\r\n          handleChange={this.handleTraversalChange}\r\n          placeholder=\"Traversal\"\r\n        >\r\n          {options}\r\n        </SelectBox>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  renderOptions() {\r\n    return (\r\n      <Grid container>\r\n        <Grid item xs={0} md={2}></Grid>\r\n        <Grid item xs={12} md={3}>\r\n          {this.renderType()}\r\n        </Grid>\r\n        <Grid item xs={12} md={3}>\r\n          {this.renderTraversal()}\r\n        </Grid>\r\n        <Grid className=\"button\" item xs={12} md={1}>\r\n          <div>{this.renderButtons()}</div>\r\n        </Grid>\r\n        <Grid item xs={0} md={2}></Grid>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  renderButtons() {\r\n    const { type, traversal, isTraverseInProgress } = this.state;\r\n    let disabled = true;\r\n    if (type && traversal && !isTraverseInProgress) {\r\n      disabled = false;\r\n    }\r\n    return (\r\n      <Button\r\n        onClick={this.startTraversal}\r\n        disabled={disabled}\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n      >\r\n        Start\r\n      </Button>\r\n    );\r\n  }\r\n\r\n  renderActiveList() {\r\n    const { activeList, traversal } = this.state;\r\n    const list = activeList.map((node) => {\r\n      let newNode = new TNode(`_${node.id}`, node.name);\r\n      return (\r\n        <TreeNode node={newNode} active={newNode} showActiveArrow={false} />\r\n      );\r\n    });\r\n\r\n    if (list.length == 0) return null;\r\n\r\n    return (\r\n      <div className=\"tree-active-list\">\r\n        <p>{traversal} Traversal</p>\r\n        <Grid container xs={12} direction=\"row\" justify=\"center\" wrap={true}>\r\n          {list}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  startTraversal = () => {\r\n    this.setState(\r\n      {\r\n        isTraverseInProgress: true,\r\n        active: null,\r\n        activeList: [],\r\n      },\r\n      () => {this._startTraversal()}\r\n    );\r\n  };\r\n\r\n  _startTraversal = () => {\r\n    const { tree, traversal } = this.state;\r\n    switch (traversal) {\r\n      case treeCONST.INORDER:\r\n        inOrder(tree, this.setActive, this.onTraversalFinish);\r\n        break;\r\n      case treeCONST.PREORDER:\r\n        preOrder(tree, this.setActive, this.onTraversalFinish);\r\n        break;\r\n      case treeCONST.POSTORDER:\r\n        postOrder(tree, this.setActive, this.onTraversalFinish);\r\n        break;\r\n      case treeCONST.LEVELORDER:\r\n        levelOrder(tree, this.setActive, this.onTraversalFinish);\r\n        break;\r\n    }\r\n  };\r\n\r\n  setActive = (active) => {\r\n    const { activeList } = this.state;\r\n    activeList.push(active);\r\n    this.setState({ active, activeList },() => {\r\n      this.scrollToBottom();\r\n    });\r\n  };\r\n\r\n  onTraversalFinish = () => {\r\n    this.setState(\r\n      {\r\n        isTraverseInProgress: false,\r\n        isTraverseFinish: true,\r\n      });\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    window.scrollTo(0, document.body.scrollHeight);\r\n  };\r\n\r\n  handleSnackBarClose = () => {\r\n    this.setState({ isTraverseFinish: false });\r\n  };\r\n\r\n  // Snackbar animation\r\n  TransitionRight(props) {\r\n    return <Slide {...props} direction=\"left\" />;\r\n  }\r\n\r\n  render() {\r\n    const { tree, active, traversal, isTraverseFinish } = this.state;\r\n    return (\r\n      <div className=\"tree-container\">\r\n        <Grid container>\r\n          {this.renderOptions()}\r\n          <Grid item xs={12} md={12}>\r\n            <TreeNode node={tree} active={active} />\r\n          </Grid>\r\n          {this.renderActiveList()}\r\n        </Grid>\r\n        <Snackbar\r\n          open={isTraverseFinish}\r\n          autoHideDuration={6000}\r\n          TransitionComponent = {this.TransitionRight}\r\n          anchorOrigin = {{ vertical: 'top', horizontal: 'right' }}\r\n          onClose={this.handleSnackBarClose}\r\n        >\r\n          <MuiAlert elevation={6} variant=\"filled\" severity=\"success\">\r\n            {traversal} Finished!\r\n          </MuiAlert>\r\n        </Snackbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export default {\r\n    tree : {\r\n        DFS : \"DFS\",\r\n        BFS : \"BFS\",\r\n        INORDER : \"In Order\",\r\n        PREORDER : \"Pre Order\",\r\n        POSTORDER : \"Post Order\",\r\n        LEVELORDER : \"Level Order\"\r\n    }\r\n}","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { AccountTree } from \"@material-ui/icons\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"xs\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n  sectionDesktop: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"xs\")]: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n  padding : {\r\n    width:1,\r\n    height:64\r\n  }\r\n}));\r\n\r\nexport function TopNavBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n          >\r\n            <AccountTree />\r\n          </IconButton>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Tree Traversal Visualizer\r\n          </Typography>\r\n\r\n          <div className={classes.grow} />\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className = {classes.padding}></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopNavBar;\r\n","import React from 'react'\r\nimport { HashRouter as Router,Route,Switch } from 'react-router-dom'\r\nimport Tree from '../containers/Tree/Tree'\r\nimport TopNavBar from '../components/TopNavBar/TopNavBar'\r\nexport default function Routes() {\r\n    return (\r\n        <Router>\r\n            <TopNavBar />\r\n            <Switch>\r\n                <Route exact path = \"/\" component = {Tree}/>\r\n                <Route path = \"/tree\" component = {Tree}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Routes from './Routes/Routes';\n\nfunction App() {\n  return (\n    <div className = \"App\">\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}